name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build Packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      
      - name: Build both packages using build script
        run: python build_packages.py
      
      - name: Verify wheel contents (Linux/Mac)
        if: runner.os != 'Windows'
        run: |
          echo "=== Wheel Contents ==="
          for wheel in dist/*.whl; do
            echo "Contents of $wheel:"
            python -m zipfile -l "$wheel"
            echo ""
          done
      
      - name: Install and test packages
        shell: bash
        run: |
          pip install dist/*.whl
          python -c "import task_app; import budget_app; import tui_common; print('All packages imported successfully')"
          task-app --help || echo "Task app CLI installed"
          budget-app --help || echo "Budget app CLI installed"
      
      - name: Upload build artifacts (Ubuntu Python 3.10 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing || true
      
      - name: Run linters
        run: |
          ruff check . || true
          mypy src/ || true
