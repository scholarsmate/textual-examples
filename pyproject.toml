[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "textual-tui-apps"
dynamic = ["version"]
description = "Professional Textual TUI applications: Task Manager and Budget Tracker"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    {name = "Scholar's Mate", email = "scholarsmate@users.noreply.github.com"}
]
keywords = ["tui", "textual", "terminal", "task-manager", "budget-tracker", "cli"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
    "Topic :: Utilities",
]

dependencies = [
    "textual>=6.2.1",
    "bcrypt>=5.0.0",
    "cryptography>=43.0.3",
    "rich>=14.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=25.9.0",
    "ruff>=0.13.3",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[project.scripts]
budget-app = "budget_app.main:main"
task-app = "task_app.main:main"

[project.urls]
Homepage = "https://github.com/scholarsmate/textual-examples"
Repository = "https://github.com/scholarsmate/textual-examples"
Issues = "https://github.com/scholarsmate/textual-examples/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
lint.select = ["E", "F", "W", "B", "I", "UP", "N", "SIM"]
extend-exclude = ["data", ".venv", "build", "dist", "htmlcov", "**/__pycache__", "**/*.egg-info"]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["tui_common", "task_app", "budget_app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    ".venv/*",
    "data/*",
    "build/*",
    "dist/*",
    "htmlcov/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Hatch configuration (optional but recommended for dev convenience)
[tool.hatch.envs.default]
# Install project in editable mode with dev extras
features = ["dev"]
skip-install = true
dependencies = [
    "build>=1.2.2",
]

[tool.hatch.envs.default.scripts]
# App launchers
task = "task-app"
budget = "budget-app"
task-web = "python -m textual run --web --port 8000 ./src/task_app/main.py"
budget-web = "python -m textual run --web --port 8000 ./src/budget_app/main.py"

# QA utilities
test = "pytest"
cov = "pytest --cov"
lint = "ruff check ."
format = "black ."
# Avoid circular expansion by not naming scripts after the tool binaries
typecheck = "python -m mypy ."
typecheck-pyright = "pyright"

# Build shortcuts using PEP 517 builder
build-task = "python -m build -w -s packages/task-app"
build-budget = "python -m build -w -s packages/budget-app"
build-all = [
    "python -m build -w -s packages/task-app",
    "python -m build -w -s packages/budget-app",
]

# Manage project version via VERSION file
[tool.hatch.version]
path = "VERSION"
